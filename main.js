/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module2) {
    module2.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeChatUploaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var crypto = __toESM(require("crypto"));
var FormData = require_browser();
var DEFAULT_SETTINGS = {
  appId: "",
  appSecret: "",
  accessToken: "",
  tokenExpireTime: 0,
  autoUpload: true
};
var WeChatUploaderPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new WeChatUploaderSettingTab(this.app, this));
    this.addCommand({
      id: "upload-all-images",
      name: "\u4E0A\u4F20\u5F53\u524D\u6587\u6863\u4E2D\u7684\u6240\u6709\u56FE\u7247\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7",
      editorCallback: (editor, view) => {
        this.uploadAllImages(editor, view);
      }
    });
    this.addCommand({
      id: "upload-selected-image",
      name: "\u4E0A\u4F20\u5F53\u524D\u9009\u4E2D\u7684\u56FE\u7247\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7",
      editorCallback: (editor, view) => {
        this.uploadSelectedImage(editor, view);
      }
    });
    this.addCommand({
      id: "upload-from-file-picker",
      name: "\u4ECE\u6587\u4EF6\u9009\u62E9\u5668\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7",
      callback: () => {
        this.uploadFromFilePicker();
      }
    });
    this.addCommand({
      id: "refresh-access-token",
      name: "\u5237\u65B0\u5FAE\u4FE1\u516C\u4F17\u53F7 Access Token",
      callback: () => {
        this.refreshAccessToken();
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-paste", (evt, editor) => {
        if (this.settings.autoUpload) {
          this.handlePaste(evt, editor);
        }
      })
    );
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("\u5FAE\u4FE1\u56FE\u7247\u4E0A\u4F20\u5668");
    this.addRibbonIcon("image-file", "\u4E0A\u4F20\u56FE\u7247\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7", async () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        await this.uploadAllImages(activeView.editor, activeView);
      } else {
        new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A Markdown \u6587\u4EF6");
      }
    });
    if (this.isAccessTokenExpired()) {
      await this.refreshAccessToken();
    }
    console.log("\u5FAE\u4FE1\u56FE\u7247\u4E0A\u4F20\u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  async onunload() {
    console.log("\u5FAE\u4FE1\u56FE\u7247\u4E0A\u4F20\u63D2\u4EF6\u5DF2\u5378\u8F7D");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  isAccessTokenExpired() {
    return !this.settings.accessToken || !this.settings.tokenExpireTime || Date.now() > this.settings.tokenExpireTime;
  }
  async refreshAccessToken() {
    if (!this.settings.appId || !this.settings.appSecret) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u586B\u5199 AppID \u548C AppSecret");
      return false;
    }
    try {
      const url = `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${this.settings.appId}&secret=${this.settings.appSecret}`;
      const req = {
        url,
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      };
      console.log("\u6B63\u5728\u8BF7\u6C42 access_token\uFF0CURL:", url);
      const resp = await (0, import_obsidian.requestUrl)(req);
      console.log("\u5FAE\u4FE1 API \u54CD\u5E94:", resp.json);
      const respAccessToken = resp.json["access_token"];
      if (respAccessToken === void 0) {
        const errcode = resp.json["errcode"];
        const errmsg = resp.json["errmsg"];
        console.error("\u83B7\u53D6 Access Token \u5931\u8D25:", errmsg);
        new import_obsidian.Notice(`\u83B7\u53D6 Access Token \u5931\u8D25: errorCode: ${errcode}, errmsg: ${errmsg}`);
        return false;
      } else {
        this.settings.accessToken = respAccessToken;
        this.settings.tokenExpireTime = Date.now() + resp.json["expires_in"] * 1e3;
        await this.saveSettings();
        new import_obsidian.Notice("Access Token \u5237\u65B0\u6210\u529F");
        return true;
      }
    } catch (error) {
      console.error("\u5237\u65B0 Access Token \u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice(`\u5237\u65B0 Access Token \u5931\u8D25: ${error.message}`);
      return false;
    }
  }
  async handlePaste(evt, editor) {
    var _a;
    const items = (_a = evt.clipboardData) == null ? void 0 : _a.items;
    if (!items)
      return;
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (item.type.indexOf("image") !== -1) {
        evt.preventDefault();
        const blob = item.getAsFile();
        if (!blob)
          continue;
        const tempFilePath = this.getTempFilePath(blob);
        const reader = new FileReader();
        reader.onload = async (event) => {
          var _a2;
          const buffer = Buffer.from((_a2 = event.target) == null ? void 0 : _a2.result);
          fs.writeFileSync(tempFilePath, buffer);
          const imageMd = `![uploading...](${tempFilePath})`;
          editor.replaceSelection(imageMd);
          try {
            const imageUrl = await this.uploadImageToWeChat(tempFilePath);
            if (imageUrl) {
              const content = editor.getValue();
              const newContent = content.replace(
                `![uploading...](${tempFilePath})`,
                `![](${imageUrl})`
              );
              editor.setValue(newContent);
              new import_obsidian.Notice("\u56FE\u7247\u5DF2\u4E0A\u4F20\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7");
            } else {
              new import_obsidian.Notice("\u56FE\u7247\u4E0A\u4F20\u5931\u8D25");
            }
          } catch (error) {
            console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
            new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
          } finally {
            if (fs.existsSync(tempFilePath)) {
              fs.unlinkSync(tempFilePath);
            }
          }
        };
        reader.readAsArrayBuffer(blob);
        break;
      }
    }
  }
  getTempFilePath(file) {
    const fileName = `pasted-${Date.now()}.${file.name.split(".").pop() || "png"}`;
    const vaultPath = this.app.vault.adapter.basePath;
    const tempDir = path.join(vaultPath, ".temp");
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    return path.join(tempDir, fileName);
  }
  async uploadSelectedImage(editor, view) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u56FE\u7247\u94FE\u63A5");
      return;
    }
    const markdownImageRegex = /!\[(.*?)\]\((.*?)\)/;
    const obsidianImageRegex = /!\[\[(.*?)\]\]/;
    let match = selectedText.match(markdownImageRegex);
    let isObsidianFormat = false;
    if (!match) {
      match = selectedText.match(obsidianImageRegex);
      isObsidianFormat = true;
      if (!match) {
        new import_obsidian.Notice("\u9009\u4E2D\u7684\u6587\u672C\u4E0D\u662F\u6709\u6548\u7684\u56FE\u7247\u94FE\u63A5");
        return;
      }
    }
    if (this.isAccessTokenExpired()) {
      const success = await this.refreshAccessToken();
      if (!success) {
        new import_obsidian.Notice("\u65E0\u6CD5\u5237\u65B0 Access Token\uFF0C\u8BF7\u68C0\u67E5 AppID \u548C AppSecret \u8BBE\u7F6E");
        return;
      }
    }
    try {
      let absolutePath = null;
      let altText = "";
      let imagePath = "";
      if (isObsidianFormat) {
        const imageName = match[1];
        const attachmentFolderPath = this.getAttachmentFolderPath(view.file);
        if (!attachmentFolderPath) {
          new import_obsidian.Notice(`\u65E0\u6CD5\u786E\u5B9A\u9644\u4EF6\u6587\u4EF6\u5939\u8DEF\u5F84`);
          return;
        }
        absolutePath = path.join(attachmentFolderPath, imageName);
        if (!fs.existsSync(absolutePath)) {
          const vaultPath = this.app.vault.adapter.basePath;
          const altPath = path.join(vaultPath, imageName);
          if (fs.existsSync(altPath)) {
            absolutePath = altPath;
          } else {
            new import_obsidian.Notice(`\u627E\u4E0D\u5230\u56FE\u7247: ${imageName}`);
            return;
          }
        }
      } else {
        altText = match[1];
        imagePath = match[2];
        if (imagePath.startsWith("http")) {
          new import_obsidian.Notice("\u8BE5\u56FE\u7247\u5DF2\u7ECF\u662F\u5728\u7EBF\u94FE\u63A5\uFF0C\u65E0\u9700\u4E0A\u4F20");
          return;
        }
        absolutePath = this.getAbsoluteImagePath(imagePath, view.file);
        if (!absolutePath || !fs.existsSync(absolutePath)) {
          new import_obsidian.Notice(`\u627E\u4E0D\u5230\u56FE\u7247: ${imagePath}`);
          return;
        }
      }
      new import_obsidian.Notice("\u6B63\u5728\u4E0A\u4F20\u56FE\u7247...");
      const imageUrl = await this.uploadImageToWeChat(absolutePath);
      if (imageUrl) {
        let newText;
        if (isObsidianFormat) {
          newText = `![](${imageUrl})`;
        } else {
          newText = `![${altText}](${imageUrl})`;
        }
        editor.replaceSelection(newText);
        new import_obsidian.Notice("\u56FE\u7247\u4E0A\u4F20\u6210\u529F");
      }
    } catch (error) {
      console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
    }
  }
  async uploadFromFilePicker() {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    fileInput.style.display = "none";
    document.body.appendChild(fileInput);
    fileInput.onchange = async (e) => {
      const files = e.target.files;
      if (!files || files.length === 0) {
        document.body.removeChild(fileInput);
        return;
      }
      if (this.isAccessTokenExpired()) {
        const success = await this.refreshAccessToken();
        if (!success) {
          new import_obsidian.Notice("\u65E0\u6CD5\u5237\u65B0 Access Token\uFF0C\u8BF7\u68C0\u67E5 AppID \u548C AppSecret \u8BBE\u7F6E");
          document.body.removeChild(fileInput);
          return;
        }
      }
      const file = files[0];
      const tempFilePath = this.getTempFilePath(file);
      try {
        const arrayBuffer = await file.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        fs.writeFileSync(tempFilePath, buffer);
        new import_obsidian.Notice("\u6B63\u5728\u4E0A\u4F20\u56FE\u7247...");
        const imageUrl = await this.uploadImageToWeChat(tempFilePath);
        if (imageUrl) {
          const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (activeView) {
            const editor = activeView.editor;
            editor.replaceSelection(`![](${imageUrl})`);
            new import_obsidian.Notice("\u56FE\u7247\u4E0A\u4F20\u6210\u529F\u5E76\u5DF2\u63D2\u5165\u5230\u7F16\u8F91\u5668");
          } else {
            navigator.clipboard.writeText(imageUrl);
            new import_obsidian.Notice("\u56FE\u7247\u4E0A\u4F20\u6210\u529F\uFF0C\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
          }
        }
      } catch (error) {
        console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
        new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
      } finally {
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
        }
        document.body.removeChild(fileInput);
      }
    };
    fileInput.click();
  }
  async uploadAllImages(editor, view) {
    const content = editor.getValue();
    const markdownImageRegex = /!\[(.*?)\]\((.*?)\)/g;
    const obsidianImageRegex = /!\[\[(.*?)\]\]/g;
    let match;
    let newContent = content;
    let uploadCount = 0;
    let failCount = 0;
    if (this.isAccessTokenExpired()) {
      const success = await this.refreshAccessToken();
      if (!success) {
        new import_obsidian.Notice("\u65E0\u6CD5\u5237\u65B0 Access Token\uFF0C\u8BF7\u68C0\u67E5 AppID \u548C AppSecret \u8BBE\u7F6E");
        return;
      }
    }
    while ((match = markdownImageRegex.exec(content)) !== null) {
      const altText = match[1];
      const imagePath = match[2];
      if (imagePath.startsWith("http"))
        continue;
      const absolutePath = this.getAbsoluteImagePath(imagePath, view.file);
      if (!absolutePath || !fs.existsSync(absolutePath)) {
        new import_obsidian.Notice(`\u627E\u4E0D\u5230\u56FE\u7247: ${imagePath}`);
        failCount++;
        continue;
      }
      try {
        const imageUrl = await this.uploadImageToWeChat(absolutePath);
        if (imageUrl) {
          newContent = newContent.replace(
            `![${altText}](${imagePath})`,
            `![${altText}](${imageUrl})`
          );
          uploadCount++;
        } else {
          failCount++;
        }
      } catch (error) {
        console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
        new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
        failCount++;
      }
    }
    while ((match = obsidianImageRegex.exec(content)) !== null) {
      const imageName = match[1];
      if (imageName.startsWith("http"))
        continue;
      const attachmentFolderPath = this.getAttachmentFolderPath(view.file);
      if (!attachmentFolderPath) {
        new import_obsidian.Notice(`\u65E0\u6CD5\u786E\u5B9A\u9644\u4EF6\u6587\u4EF6\u5939\u8DEF\u5F84`);
        failCount++;
        continue;
      }
      const absolutePath = path.join(attachmentFolderPath, imageName);
      if (!fs.existsSync(absolutePath)) {
        const vaultPath = this.app.vault.adapter.basePath;
        const altPath = path.join(vaultPath, imageName);
        if (!fs.existsSync(altPath)) {
          new import_obsidian.Notice(`\u627E\u4E0D\u5230\u56FE\u7247: ${imageName}`);
          failCount++;
          continue;
        }
      }
      try {
        const imageUrl = await this.uploadImageToWeChat(absolutePath);
        if (imageUrl) {
          newContent = newContent.replace(
            `![[${imageName}]]`,
            `![](${imageUrl})`
          );
          uploadCount++;
        } else {
          failCount++;
        }
      } catch (error) {
        console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
        new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
        failCount++;
      }
    }
    if (uploadCount > 0) {
      editor.setValue(newContent);
      new import_obsidian.Notice(`\u6210\u529F\u4E0A\u4F20 ${uploadCount} \u5F20\u56FE\u7247${failCount > 0 ? `\uFF0C${failCount} \u5F20\u5931\u8D25` : ""}`);
    } else if (failCount === 0) {
      new import_obsidian.Notice("\u6CA1\u6709\u627E\u5230\u9700\u8981\u4E0A\u4F20\u7684\u672C\u5730\u56FE\u7247");
    }
  }
  getAttachmentFolderPath(file) {
    if (!file)
      return null;
    const vaultPath = this.app.vault.adapter.basePath;
    try {
      const attachmentFolderPath = this.app.vault.config.attachmentFolderPath;
      if (attachmentFolderPath) {
        if (attachmentFolderPath.startsWith("./")) {
          const fileDir = path.dirname(file.path);
          return path.join(vaultPath, fileDir, attachmentFolderPath.substring(2));
        } else {
          return path.join(vaultPath, attachmentFolderPath);
        }
      }
    } catch (e) {
      console.log("\u65E0\u6CD5\u83B7\u53D6\u9644\u4EF6\u6587\u4EF6\u5939\u8BBE\u7F6E\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u8DEF\u5F84");
    }
    const possibleFolders = [
      path.join(vaultPath, "attachments"),
      path.join(vaultPath, "assets"),
      path.join(vaultPath, "images"),
      path.join(vaultPath, path.dirname(file.path), "attachments"),
      path.join(vaultPath, path.dirname(file.path), "assets"),
      path.join(vaultPath, path.dirname(file.path), "images"),
      path.join(vaultPath, "Pasted Images")
    ];
    for (const folder of possibleFolders) {
      if (fs.existsSync(folder)) {
        return folder;
      }
    }
    return vaultPath;
  }
  getAbsoluteImagePath(relativePath, file) {
    if (!file)
      return null;
    if (path.isAbsolute(relativePath)) {
      return relativePath;
    }
    const fileDir = path.dirname(file.path);
    const vaultPath = this.app.vault.adapter.basePath;
    return path.join(vaultPath, fileDir, relativePath);
  }
  async uploadImageToWeChat(imagePath) {
    if (this.isAccessTokenExpired()) {
      const success = await this.refreshAccessToken();
      if (!success) {
        throw new Error("\u65E0\u6CD5\u5237\u65B0 Access Token");
      }
    }
    try {
      const fileName = path.basename(imagePath, path.extname(imagePath));
      let blobBytes = null;
      if (imagePath.startsWith("http")) {
        const imgresp = await (0, import_obsidian.requestUrl)(imagePath);
        blobBytes = imgresp.arrayBuffer;
      } else {
        blobBytes = fs.readFileSync(imagePath).buffer;
      }
      const boundary = this.chooseBoundary();
      const end_boundary = "\r\n--" + boundary + "--\r\n";
      let formDataString = "";
      formDataString += "--" + boundary + "\r\n";
      const fileExt = path.extname(imagePath).toLowerCase().substring(1);
      let contentType = "application/octet-stream";
      if (fileExt === "jpg" || fileExt === "jpeg") {
        contentType = "image/jpeg";
      } else if (fileExt === "png") {
        contentType = "image/png";
      } else if (fileExt === "gif") {
        contentType = "image/gif";
      } else if (fileExt === "bmp") {
        contentType = "image/bmp";
      } else if (fileExt === "webp") {
        contentType = "image/webp";
      }
      formDataString += `Content-Disposition: form-data; name="media"; filename="${fileName}.${fileExt}"\r
`;
      formDataString += `Content-Type: ${contentType}\r
\r
`;
      const formDatabuffer = Buffer.from(formDataString, "utf-8");
      let resultArray = Array.from(formDatabuffer);
      if (blobBytes !== null) {
        let pic_typedArray = new Uint8Array(blobBytes);
        let endBoundaryArray = [];
        for (let i = 0; i < end_boundary.length; i++) {
          endBoundaryArray.push(end_boundary.charCodeAt(i));
        }
        let postArray = resultArray.concat(Array.prototype.slice.call(pic_typedArray), endBoundaryArray);
        let post_typedArray = new Uint8Array(postArray);
        const url = `https://api.weixin.qq.com/cgi-bin/media/uploadimg?access_token=${this.settings.accessToken}`;
        const header = {
          "Content-Type": "multipart/form-data; boundary=" + boundary,
          "Accept-Encoding": "gzip, deflate, br",
          "Accept": "*/*",
          "Connection": "keep-alive"
        };
        const req = {
          url,
          method: "POST",
          headers: header,
          body: post_typedArray.buffer
        };
        const resp = await (0, import_obsidian.requestUrl)(req);
        const imageUrl = resp.json["url"];
        if (imageUrl === void 0) {
          const errcode = resp.json["errcode"];
          const errmsg = resp.json["errmsg"];
          console.error("\u4E0A\u4F20\u56FE\u7247\u5931\u8D25:", errmsg);
          new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: errorCode: ${errcode}, errmsg: ${errmsg}`);
          return null;
        }
        new import_obsidian.Notice(`\u56FE\u7247\u4E0A\u4F20\u6210\u529F`);
        return imageUrl;
      } else {
        throw new Error("\u56FE\u7247\u6570\u636E\u4E3A\u7A7A");
      }
    } catch (error) {
      console.error("\u4E0A\u4F20\u56FE\u7247\u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${error.message}`);
      return null;
    }
  }
  chooseBoundary() {
    const boundary = crypto.randomBytes(16).toString("hex");
    return boundary;
  }
  async getImageUrl(mediaId) {
    try {
      return `https://api.weixin.qq.com/cgi-bin/media/get?access_token=${this.settings.accessToken}&media_id=${mediaId}`;
    } catch (error) {
      console.error("\u83B7\u53D6\u56FE\u7247 URL \u65F6\u51FA\u9519:", error);
      return `https://api.weixin.qq.com/cgi-bin/media/get?access_token=${this.settings.accessToken}&media_id=${mediaId}`;
    }
  }
};
var WeChatUploaderSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u5FAE\u4FE1\u516C\u4F17\u53F7\u56FE\u7247\u4E0A\u4F20\u5668\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("AppID").setDesc("\u8F93\u5165\u4F60\u7684\u5FAE\u4FE1\u516C\u4F17\u53F7 AppID").addText((text) => text.setPlaceholder("AppID").setValue(this.plugin.settings.appId).onChange(async (value) => {
      this.plugin.settings.appId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("AppSecret").setDesc("\u8F93\u5165\u4F60\u7684\u5FAE\u4FE1\u516C\u4F17\u53F7 AppSecret").addText((text) => text.setPlaceholder("AppSecret").setValue(this.plugin.settings.appSecret).onChange(async (value) => {
      this.plugin.settings.appSecret = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u4E0A\u4F20").setDesc("\u7C98\u8D34\u56FE\u7247\u65F6\u81EA\u52A8\u4E0A\u4F20\u5230\u5FAE\u4FE1\u516C\u4F17\u53F7").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoUpload).onChange(async (value) => {
      this.plugin.settings.autoUpload = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Access Token").setDesc("\u5F53\u524D\u7684 Access Token\uFF08\u53EA\u8BFB\uFF09").addText((text) => text.setValue(this.plugin.settings.accessToken || "\u672A\u83B7\u53D6").setDisabled(true));
    new import_obsidian.Setting(containerEl).setName("\u5237\u65B0 Access Token").setDesc("\u70B9\u51FB\u6309\u94AE\u5237\u65B0 Access Token").addButton((button) => button.setButtonText("\u5237\u65B0").setCta().onClick(async () => {
      await this.plugin.refreshAccessToken();
      this.display();
    }));
  }
};
